---
layout: post
title:      "My First Project"
date:       2019-02-04 00:29:25 +0000
permalink:  my_first_project
---



Starting the first portfolio project, I was a bit nervous, a feeling many Flatiron students and new coders most likely share when they reach this step. This would be the first time that my code would be interacting with something real and in use on the internet. I would also not have the premade tests present in the labs to help me figure things out if something went wrong. Like those before me though, I was also excited and looked forward to testing the skills I had learned so far and the feeling of accomplishment that would come when I was finished. 

The first step, before even thinking about code or pseudocode, was deciding what my gem would do. I wanted to create something that would provide useful or interesting information to people (or at least myself). My first thought was, seeing as I like to keep up on tech and other current events, I could scrape a few popular tech news sites and allow users to browse and read articles without having to visit each one individually. However, I also felt that you could find a similar program almost everywhere, as most browsers have a news feature built into their homepages so I kept that idea as a backup and after some more thought, settled on something else. For this idea, I wanted to scrape another popular site that I and many others frequently use: youtube. 

I wanted to give users the ability to enter any channel they wanted into the gem, and get back a variety of statistics such as average views/video length or a list of titles sorted by one of these values. Satisfied with this idea, I dove into it and began combing through youtubes html with chromes dev tools, looking for whatever channel or video data was available. I then started thinking about the order I wanted things to be presented in the UI and the methods I would need to combine all the numbers and stats I thought I would have. However, once I started testing my methods for accessing and storing the data, I ran into some problems, I just couldnt seem to get to it for some reason. Knowing the data was there, I assumed the error was somewhere in my ruby code, and entered into a cycle of searching for a possible fix or explanation of what I was doing wrong and then tweaking/testing, only to fail again. On the second day of this trial/error testing and running out ideas on what could be wrong, I finally thought "maybe I should look more into the tool I'm using, maybe I'm just missing a step". After some time learning more about Nokogiri and again running out of possible solutions, I read over some simple information that that finally clicked as a potential roadblock and would have saved me a lot of time and frustration if I had paid attention to earlier. One quick look at youtube's page told me this was exactly the problem, I had been too focused on the idea that there was an error in my code to notice that Nokogiri just doesn't play well with pages using Javascript! 

Shortly after learning this and kicking myself for not realizing something so obvious earlier, I thought about using youtubes api instead, but decided against it because I wanted to test the skills I had been learning and the using the api was almost like using another language. I then much more carefully tested out two other ideas I had had, both of which disappointingly turned out not to be viable for me either. The first was similar to what I had wanted to do with youtube, but with the popular social/gaming livestreaming site Twitch.tv instead, and the second was to comb some of the larger classic car dealers and aggregate them so users could search them all at once. Unfortunately, Twitch also used javascipt and scraping for the cars took a long time in broader queries because of how many there were and would have required a number of exceptions due to inconsistencies in their listing. Wanting to move on with the project, I finally settled on my original news idea and began planning out my gem again (after making sure I could actually use the sites I wanted this time!). 

I started out with some pseudocode again so I could have a good idea of what I would need, and wrote out all the methods for scraping, UI messages, and displaying article titles/text, and tied them together so they could access eachother and communicate properly. Then, after reading up on how to actually create a gem usable by others (in a useful tutorial written by another Flatiron student), a little advice from a friend on how I could better implement the single responsibility principle, and some final testing, my program was functional and complete! Even though its a simple program, I finally had that feeling of accomplishment and satisfaction. I had written something that interacted with the internet and allowed people to browse different categories of news, read articles, move around a menu, and get a url if they want to read in browser or share a story with a friend. I also learned a valuable lesson despite all the frustration and lost time in the beginning, I will now always remember to make sure I know the limits of the tools I'm using and that they're the right ones for the job. 


I'll be updating this if possible with a link to my gem at some point for anyone interested, but one of the sites I'm scraping doesn't seem to like consistency in their article tagging so I keep finding new exceptions to account for!

